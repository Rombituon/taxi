// Copyright (c) 2018, Bilal Ghayad and contributors
// For license information, please see license.txt

cur_frm.add_fetch('driver', 'employee_name', 'driver_name')
cur_frm.add_fetch('driver', 'employment_type', 'employment_type')
cur_frm.add_fetch('driver', 'money_collection_account', 'driver_cash_account')

frappe.ui.form.on('Clearance With Driver', {
	refresh: function(frm) {

	},
        onload: function(frm) {
                frm.set_query("driver", function(doc) {
                        return {
                                filters: {
                                        'status': 'Active'
                                }
                        };
                });
        },
	driver: function(frm) {
		if (cur_frm.doc.driver) {
			frappe.call({
                		method: "taxi.taxi.doctype.trip_order.trip_order.get_vehicle",
                		args: {
                        		"AssignedDriver": frm.doc.driver
                		},
                		callback: function(r) {
                        		if (r.message) {
                                		cur_frm.set_value("vehicle", r.message);
                        		}
                		}
        		})
                	frappe.call({
                        	method: "taxi.taxi.doctype.clearance_with_driver.clearance_with_driver.get_values",
                        	args: {
                                	"driver": frm.doc.driver,
                                	"clearance_date": frm.doc.clearance_date
                        	},
                        	callback: function(r) {
                                	if (r.message) {
						var statement = r.message[4];
						var last_payment = r.message[2];
						var last_clearance = r.message[3];
						if (last_clearance == "")
                                			cur_frm.set_value("last_clearance_date", "");	
						else
                                			cur_frm.set_value("last_clearance_date", last_clearance[0]['modified']);
	                               		cur_frm.set_value("cash_with_him", r.message[1]);
                                		cur_frm.set_value("last_payment_date", last_payment[0]['creation']);
						filling_and_calculation(frm, statement);
						if (cur_frm.doc.employment_type != "Commission") {	
	                               			cur_frm.set_value("our_net_amount", r.message[1]);
	                               			cur_frm.set_value("net_amount_for_driver", 0);
	                               			cur_frm.set_value("driver_commission_amount", 0);
	                               			cur_frm.set_value("no_of_driver_due_weekly_fees", 0);
	                               			cur_frm.set_value("driver_due_weekly_fees", 0);
	                               			cur_frm.set_value("driver_net_amount", 220000);
						}
	                               		cur_frm.set_value("driver_cash_account_balance", r.message[1]);
	                               		cur_frm.set_value("our_money_after_maintenance", r.message[1] - cur_frm.doc.driver_net_amount);
                                	}
                        	}
                	})
			refresh_field("statement_of_trips_orders");
		}
	}
});
var filling_and_calculation = function(frm, statement) {

//	frappe.msgprint(__("Welcome: {0}", [statement[0]['creation']]));

	cur_frm.clear_table("statement_of_trips_orders")
	var new_row;
	var total_orders_amount = 0.00;
	var total_cash_orders_amount = 0.00;
	var total_credit_orders_amount = 0.00;
	var collected_money_within_orders = 0.00;

	$.each(statement, function(i, row) {
//		frappe.msgprint(__("Welcome: {0}", [row.name]));
		new_row = frappe.model.add_child(cur_frm.doc, "Driver Clearance Trips Orders", "statement_of_trips_orders");
		new_row.trip_order = row.name;
		new_row.desc = row.title;
		new_row.date = row.creation;
		new_row.amount = row.grand_total;
		new_row.cash = row.cash_amount;
		new_row.credit = row.credit_amount;
		new_row.money_collection = row.money_collection;
		new_row.clearance_status = row.driver_clearance_status;
		total_orders_amount = total_orders_amount + flt(row.grand_total);
		total_cash_orders_amount = total_cash_orders_amount + flt(row.cash_amount);
		total_credit_orders_amount = total_credit_orders_amount + flt(row.credit_amount);
		collected_money_within_orders = collected_money_within_orders + flt(row.money_collection);
	});

	

	refresh_field("statement_of_trips_orders");
	cur_frm.set_value("total_orders_amount", total_orders_amount); 
	cur_frm.set_value("total_cash_orders_amount", total_cash_orders_amount); 
	cur_frm.set_value("total_credit_orders_amount", total_credit_orders_amount);
	cur_frm.set_value("collected_money_within_orders", collected_money_within_orders);
	var child_table_length = frm.doc.statement_of_trips_orders.length;
	var duration_in_hour = frappe.datetime.get_hour_diff(frm.doc.statement_of_trips_orders[0]["date"], frm.doc.statement_of_trips_orders[child_table_length - 1]["date"]);
	var duration_in_day = duration_in_hour / 24;
	cur_frm.set_value("duration_clearance", duration_in_day);

//	cur_frm.set_value("duration_clearance", frappe.datetime.get_day_diff(frm.doc.statement_of_trips_orders[0]["date"], frm.doc.statement_of_trips_orders[child_table_length - 1]["date"]));

}
